// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//! 用户(个人)
model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//! 服务器
model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  channel Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

//? 成员角色
enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

//! 成员/用户(服务器)
model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

//? 频道类型
enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

//! 频道
model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

//? 用于服务器中的消息
model Message {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  // 设计思路: 通过 deleted 字段来标记消息是否被删除
  // 保留消息记录，用户将消息清楚后，数据库中的消息数据不清除 
  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

//? 用于用户和用户之间的直接消息
model DirectMessage {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // 设计思路: 通过 deleted 字段来标记消息是否被删除
  // 保留消息记录，用户将消息清楚后，数据库中的消息数据不清除 
  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId])
  @@index([memberId])
}

//! 对话
model Conversation {
  id String @id @default(uuid())

  // memberOne做为对话发起者
  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  // memberTwo做为对话接收者
  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId]) //创建唯一约束
  // 在服务器中对应用户来说发起者都均有一个人，没必要再建立索引
  // @@index([memberOneId])
  @@index([memberTwoId])
}